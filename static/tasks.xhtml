<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta charset="utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<link rel="stylesheet" href="/bulma.min.css"/>
	<link rel="stylesheet" href="/bulmaswatch.min.css"/>
	<link rel="stylesheet" href="/css/all.min.css"/>
	<link rel="stylesheet" href="/css/tabler-icons.min.css"/>
	<script src="/lib.js" type="text/javascript"/>
	<script src="/ansi_up.js" type="text/javascript"/>
	<link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png"/>
	<link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png"/>
	<link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png"/>
	<link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png"/>
	<link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png"/>
	<link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png"/>
	<link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png"/>
	<link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png"/>
	<link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png"/>
	<link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png"/>
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"/>
	<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png"/>
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"/>
	<link rel="manifest" href="/manifest.json"/>
	<meta name="msapplication-TileColor" content="#ffffff"/>
	<meta name="msapplication-TileImage" content="/ms-icon-144x144.png"/>
	<meta name="theme-color" content="#ffffff"/>
	<style>
		.project {
			margin: 1em;
			border: 2px solid #f0de99;
			border-radius: 5px;
		}

		.project .name {
			text-align: center;
			background-color: #f0de99;
			font-weight: bold;
		}

		.task {
			display: inline-block;
			border: 2px solid;
		}

		.task .id {
			display: block;
			margin: 0 0.5em;
		}

		.task .name {
			display: block;
			margin: 0 0.5em;
		}

		.task .state {
			display: block;
			margin: 0 0.5em;
		}

		.task .type {
			font-weight: bold;
			/*width: 8em;*/
			display: block;
			margin: 0 0.5em;
		}

		.task .time {
			width: 10em;
			display: block;
			margin: 0 0.5em;
		}
	</style>
</head>
<body class="has-background-warning-light" style="min-height:100vh;padding:0;">
	<div class="modal" id="task_log">
		<div class="modal-background"/>
		<div class="modal-card" style="width:80%;">
			<header class="modal-card-head">
				<p class="modal-card-title">Task Log </p>
				<button class="delete" aria-label="close" onclick="hideTaskLogs()"/>
			</header>
			<section class="modal-card-body" id="task_section">
				<pre id="task_logs" style="color:black;background:white;white-space:pre-wrap;"/>
			</section>
			<footer class="modal-card-foot">
				<span class="tag is-medium" id="task_status"/>
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideTaskLogs()" type="reset">Close</button>
			</footer>
		</div>
	</div>
	<div class="modal" id="login">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/login" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Login</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">User Name</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="username"/>
							</div>
						</div>
					</div>
				</div>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
					<label class="label">Password</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" type="password" name="password"/>
							</div>
						</div>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogin()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Login</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="logout">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/logout" method="POST">
			<input type="hidden" name="redirect" value="/"/>
			<header class="modal-card-head">
				<p class="modal-card-title">Logout</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogout()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Logout</button>
			</footer>
		</form>
	</div>
	<nav class="navbar is-radiusless" role="navigation" aria-label="main navigation" style="position:sticky;top:0">
		<div class="navbar-brand">
			<a class="navbar-item" href="/">
				<img src="/favicon-96x96.png"/>
				<span class="is-size-4 ml-2 has-text-info has-text-weight-bold is-family-code">RACS</span>
			</a>
			<a class="navbar-item is-tab" href="/">Projects</a>
			<a class="navbar-item is-tab" href="/credentials.xhtml">Credentials</a>
			<a class="navbar-item is-tab" href="/registries.xhtml">Registries</a>
			<a class="navbar-item is-tab is-active" href="/tasks.xhtml">Tasks</a>
			<a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" id="navbar-burger">
				<span aria-hidden="true"></span>
				<span aria-hidden="true"></span>
				<span aria-hidden="true"></span>
			</a>
		</div>
		<div class="navbar-menu" id="navbar-menu">
			<div class="navbar-end">
				<div class="navbar-item has-dropdown is-hoverable">
					<a class="navbar-link" id="filter-label">Filter</a>
					<div class="navbar-dropdown">
						<div class="navbar-item">
							<form id="labels_dropdown"/>
						</div>
					</div>
				</div>
				<div class="navbar-item" id="out-actions" style="display:none;">
					<div class="buttons">
						<button class="button is-small is-primary" onclick="showLogin()">Login</button>
					</div>
				</div>
				<div class="navbar-item" id="in-actions" style="display:none;">
					<div class="buttons">
						<button class="button is-small" onclick="showCreate()">Create Project</button>
						<button class="button is-small is-danger" onclick="showLogout()">Logout</button>
					</div>
				</div>
			</div>
		</div>
	</nav>
	<div id="tasks"/>
	<div style="display:flex;flex-wrap:wrap;" id="projects"/>
	<script type="text/javascript">
		let burger = document.getElementById("navbar-burger");
		burger.onclick = function(event) {
			let menu = document.getElementById("navbar-menu");
			burger.classList.toggle("is-active");
			menu.classList.toggle("is-active");
		}

		var stages = {
			CLEANING: "clean",
			CLONING: "clone",
			PREPARING: "prepare",
			PULLING: "pull",
			BUILDING: "build",
			PREPACKAGING: "prepackage",
			PACKAGING: "package",
			PUSHING: "push",
			TAGGING: "tag",
			DELETING: "delete"
		};

		function showLogin() {
			var modal = document.getElementById("login");
			modal.addClass("is-active");
		}

		function hideLogin() {
			var modal = document.getElementById("login");
			modal.removeClass("is-active");
		}

		function showLogout() {
			var modal = document.getElementById("logout");
			modal.addClass("is-active");
		}

		function hideLogout() {
			var modal = document.getElementById("logout");
			modal.removeClass("is-active");
		}

		var ansi_up = new AnsiUp;
		var taskInterval = null;
		function showTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.addClass("is-active");
			var task = this.id;
			var container = document.getElementById("task_logs");
			var section = document.getElementById("task_section");
			var tag = document.getElementById("task_status");
			var logs = "";
			container.innerHTML = "";
			function fetchLogs() {
				fetch(`/task/logs?id=${task}&amp;offset=${logs.length}`).then(response => {
					var state = response.headers.get("X-Task-State");
					tag.textContent = state;
					tag.classList = "tag is-medium";
					switch (state) {
					case "RUNNING":
						tag.addClass("is-info");
						break;
					case "SUCCESS":
						tag.addClass("is-success");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					case "ERROR":
						tag.addClass("is-danger");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					}
					response.text().then(text => {
						logs += text;
						container.innerHTML = ansi_up.ansi_to_html(logs);
						section.scrollTop = section.scrollHeight;
					});
				});
			}
			fetchLogs();
			taskInterval = setInterval(fetchLogs, 1000);
		}

		function hideTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.removeClass("is-active");
			if (taskInterval !== null) {
				clearInterval(taskInterval);
				taskInterval = null;
			}
		}

		var container = document.getElementById("tasks");
		var projects = [];
		var tasks = [];
		
		const taskTypes = {
			DELETING: -3,
			DELETE_ERROR: -2,
			DELETE_SUCCESS: -1,
			NONE: 0,
			CREATING: 1,
			CREATE_ERROR: 2,
			CREATE_SUCCESS: 3,
			CLEANING: 4,
			CLEAN_ERROR: 5,
			CLEAN_SUCCESS: 6,
			CLONING: 7,
			CLONE_ERROR: 8,
			CLONE_SUCCESS: 9,
			PREPARING: 10,
			PREPARE_ERROR: 11,
			PREPARE_SUCCESS: 12,
			PULLING: 13,
			PULL_ERROR: 14,
			PULL_SUCCESS: 15,
			BUILDING: 16,
			BUILD_ERROR: 17,
			BUILD_SUCCESS: 18,
			PREPACKAGING: 19,
			PREPACKAGING_ERROR: 20,
			PREPACKAGING_SUCCESS: 21,
			PACKAGING: 22,
			PACKAGE_ERROR: 23,
			PACKAGE_SUCCESS: 24,
			PUSHING: 25,
			PUSH_ERROR: 26,
			PUSH_SUCCESS: 27,
			TAGGING: 28,
			TAG_ERROR: 29,
			TAG_SUCCESS: 30
		};

		function updateTask(result) {
			var project = projects[result.project];
			var taskType = taskTypes[result.type];
			if (taskType) {
				if (!project.box || project.taskType >= taskType) {
					project.tasks = create("div.tasks");
					project.box = create("div.project",
						create("div.name", "#", result.project.toString(), " ", project.name),
						project.tasks
					);
					container.prependChild(project.box);
				}
				project.taskType = taskType;
			} else {
				if (!project.box) {
					project.tasks = create("div.tasks");
					project.box = create("div.project",
						create("div.name", project.name, " #", result.project.toString()),
						project.tasks
					);
					container.prependChild(project.box);
				}
			}
			var task = tasks[result.id];
			if (!task) {
				task = tasks[result.id] = {};
				task.icon = create("i");
				task.state = create("span.icon", task.icon);
				var time = result.time.split(" ");
				task.box = create("div.task", {"on-click": showTaskLogs.bind(result)},
					create("div.type", task.state, " ", result.type),
					//create("div.id", "#", result.id.toString()),
					create("div.time", time[0], " ", time[1])
				);
				project.tasks.appendChild(task.box);
				/*while (project.tasks.children.length > 5) {
					project.tasks.removeChild(project.tasks.firstChild);
				}*/
				//project.tasks.scrollIntoView(false);
			}
			task.icon.classList = "fas";
			task.box.classList = "task notification m-1 p-1 is-light";
			switch (result.state) {
			case "RUNNING":
				//project.card.addClass("running");
				task.box.addClass("is-info");
				task.icon.addClass("fa-spinner");
				task.icon.addClass("fa-spin");
				break;
			case "SUCCESS":
				//project.card.addClass("success");
				task.box.addClass("is-success");
				task.icon.addClass("fa-check-square");
				break;
			case "ERROR":
				//project.card.addClass("error");
				task.box.addClass("is-danger");
				task.icon.addClass("fa-exclamation-triangle");
				break;
			}
		}


		function updateProject(result) {
			projects[result.id] = {name: result.name};
		}

		var events = null, fetchInterval = null;

		fetch("/user/current").then(response => response.text()).then(name => {
			console.log("User = ", name);
			window.user = name;
			var inActions = document.getElementById("in-actions");
			var outActions = document.getElementById("out-actions");
			if (name) {
				inActions.style.display = null;
				outActions.style.display = "none";
			} else {
				inActions.style.display = "none";
				outActions.style.display = null;
			}

			fetchInterval = setInterval(fetchConfig, 1000);
			fetchConfig();
		});

		function connectEvents() {
			events = new EventSource("/events");
			events.onopen = function() {
				console.log("Events opened, clearing interval");
				if (fetchInterval !== null) {
					clearInterval(fetchInterval);
					fetchInterval = null;
				}
			}
			events.onmessage = function(e) {
				var event = JSON.parse(e.data);
				console.log(event);
				switch (event.event) {
				case "project/list":
					event.projects.forEach(updateProject);
					break;
				case "project/create":
					updateProject(event);
					break;
				case "task/create":
				case "task/state": {
					updateTask(event);
					break;
				}
				}
			}
			events.onerror = function() {
				events = null;
				if (fetchInterval === null) {
					fetchInterval = setInterval(fetchConfig, 1000);
				}
			}
		}

		function fetchConfig() {
			fetch("/project/list").then(response => response.json()).then(results => {
				results.forEach(updateProject);
				if (events === null) connectEvents();
				fetch("/task/list?from=0").then(response => response.json()).then(results => {
					results.reverse().forEach(updateTask);
				});
			});
		}
	</script>
</body>
</html>
