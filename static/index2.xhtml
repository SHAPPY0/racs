<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta charset="utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<link rel="stylesheet" href="/bulma.min.css"/>
	<link rel="stylesheet" href="/bulmaswatch.min.css"/>
	<link rel="stylesheet" href="/css/all.min.css"/>
	<link rel="stylesheet" href="/css/tabler-icons.min.css"/>
	<script src="/lib.js" type="text/javascript"/>
	<script src="/ansi_up.js" type="text/javascript"/>
	<link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png"/>
	<link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png"/>
	<link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png"/>
	<link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png"/>
	<link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png"/>
	<link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png"/>
	<link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png"/>
	<link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png"/>
	<link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png"/>
	<link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png"/>
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"/>
	<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png"/>
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"/>
	<link rel="manifest" href="/manifest.json"/>
	<meta name="msapplication-TileColor" content="#ffffff"/>
	<meta name="msapplication-TileImage" content="/ms-icon-144x144.png"/>
	<meta name="theme-color" content="#ffffff"/>
	<style>
		#projects {
			display: flex;
			flex-wrap: wrap;
			padding: 0.25rem;
		}

		.project {
			width: 35rem;
			height: 5rem;
			padding: 1rem;
			border: 2px solid lightgray;
			margin: 0.5rem;
			position: relative;
			background: white;
			border-radius: 0.5rem;
		}

		.project .details {
			position: absolute;
			top: 0.5rem;
			left: 0.5rem;
		}

		.project .name {
			font-size: 1.1rem;
			font-weight: bold;
			color: black;
			text-decoration: underline;
		}

		.project .version {
			text-align: center;
			font-size: 1.1rem;
			color: blueviolet;
			margin-left: 1rem;
		}

		.project .project-tags {
			display: block;
			text-align: center;
		}
		
		.project .tags {
			position: absolute;
			right: 7rem;
			top: 0.25rem;
		}

		.project .tags span {
			display: inline-block;
			padding: 2px 4px;
			border-radius: 4px;
			color: white;
			font-size: 0.8rem;
			margin: 0.1rem;
		}

		.project .tasks {
			height: 2rem;
			overflow: auto;
			vertical-align: middle;
			position: absolute;
			left: 0;
			bottom: 0;
		}

		.tasks .task {
			display: flex;
			height: 2rem;
			padding: 0.25rem;
			width: 20rem;
		}

		.tasks .task .type {
			margin-left: 0.25em;
			font-weight: bold;
		}

		.tasks .task .time {
			flex-grow: 1;
			text-align: right;
		}

		#task_list .task {
			margin: auto;
		}

		.project progress {
			width: 13rem;
			border: 1px solid black;
			position: absolute;
			right: 0.25rem;
			bottom: 0.5rem;
		}

		.project .build-menu {
			vertical-align: middle;
			text-align: center;
			padding-top: 4px;
			position: absolute;
			top: 0rem;
			right: 0.25rem;
		}

		.modal-card-body {
			height: 30em;
		}
	</style>
</head>
<body class="has-background-warning-light" style="min-height:100vh;padding:0;">
	<div class="modal" id="create">
		<div class="modal-background"/>
		<form class="modal-card" action="/project/create" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Create Project</p>
				<button class="delete" aria-label="close" onclick="hideCreate()" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">Name</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="name"/>
							</div>
						</div>
					</div>
				</div>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">Labels</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="labels"/>
							</div>
						</div>
					</div>
				</div>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">URL</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="url"/>
							</div>
						</div>
					</div>
				</div>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">Branch</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="branch"/>
							</div>
						</div>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideCreate()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Create</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="project_settings">
		<div class="modal-background"/>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title">
					<div class="tabs is-centered is-toggle">
						<ul id="project_settings_tabs">
							<li><a onclick="showSettingsTab(0)">Settings</a></li>
							<li><a onclick="showSettingsTab(1)">Push</a></li>
							<li><a onclick="showSettingsTab(2)">Upload</a></li>
							<li><a onclick="showSettingsTab(3)">Triggers</a></li>
							<li><a onclick="showSettingsTab(4)">Vars</a></li>
							<li><a onclick="showSettingsTab(5)">Config</a></li>
							<li><a onclick="showSettingsTab(6)">Logs</a></li>
							<li><a onclick="showSettingsTab(7)">Delete</a></li>
						</ul>
					</div>
				</p>
				<button class="delete" aria-label="close" onclick="hideProjectSettings()" type="reset"/>
			</header>
			<div id="project_settings_container">
				<form action="/project/update" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="update_id" value=""/>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Name</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="name" id="update_name"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Labels</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" type="text" name="labels" id="update_labels"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">URL</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="url" id="update_url"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Branch</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="branch" id="update_branch"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">BuildSpec</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="buildSpec" id="update_buildSpec"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">PrepackageSpec</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="prepackageSpec" id="update_prepackageSpec"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">PackageSpec</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="packageSpec" id="update_packageSpec"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Protected</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="checkbox" type="checkbox" name="protected" id="update_protected"/>
									</div>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Push Tag</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="checkbox" type="checkbox" name="tagRepo" id="update_tagRepo"/>
									</div>
								</div>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit">Update</button>
					</footer>
				</form>
				<form action="/project/destinations" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="destination_id" value=""/>
						<input type="hidden" name="destinations" id="destination_destinations" value=""/>
						<table class="table is-fullwidth">
							<tbody id="destination_table"/>
						</table>
					</section>
					<footer class="modal-card-foot">
						<span class="button is-info" onclick="addDestination()">Add Destination</span>
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit" onclick="submitDestinations()">Update</button>
					</footer>
				</form>
				<form action="/project/upload" method="POST" enctype="multipart/form-data">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="upload_id" value=""/>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Type</label>
							</div>
							<div class="field-body" style="clear:both;">
								<div class="field is-narrow">
									<div class="control">
										<div class="select" autocomplete="off">
											<select onchange="changeUploadType(event)" id="upload_type">
												<option value="file" selected="true">File</option>
												<option value="text">Text</option>
											</select>
										</div>
									</div>
								</div>
								<div class="field">
									<div class="control" id="upload_value"/>
								</div>
							</div>
						</div>
						<div class="field is-horizontal">
							<div class="field-label is-normal">
								<label class="label">Name</label>
							</div>
							<div class="field-body">
								<div class="field">
									<div class="control is-expanded">
										<input class="input" name="name" id="uploadname"/>
									</div>
								</div>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit">Upload</button>
					</footer>
				</form>
				<form action="/project/triggers" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="trigger_id" value=""/>
						<input type="hidden" name="triggers" id="trigger_triggers" value=""/>
						<table class="table is-fullwidth">
							<tbody id="trigger_table"/>
						</table>
					</section>
					<footer class="modal-card-foot">
						<span class="button is-info" onclick="addTrigger()">Add Trigger</span>
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit" onclick="submitTriggers()">Update</button>
					</footer>
				</form>
				<form action="/project/environment" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="environment_id" value=""/>
						<input type="hidden" name="environment" id="environment_credentials" value=""/>
						<table class="table is-fullwidth">
							<tbody id="environment_table"/>
						</table>
					</section>
					<footer class="modal-card-foot">
						<span class="button is-info" onclick="addCredential()">Add Credential</span>
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit" onclick="submitEnvironment()">Update</button>
					</footer>
				</form>
				<form action="/project/upload" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="config_id" value=""/>
						<input type="hidden" name="name" id="config_name" value=""/>
						<div style="display:flex;height:100%;">
							<div class="content mr-2 pr-2" style="flex:10rem 0 0;height:100%;overflow:auto;border-right:1px solid gray;">
								<table class="table" id="config_list"/>
							</div>
							<div class="content" style="flex:1 1;height:100%;overflow:auto;">
								<textarea class="textarea" id="config_text" name="value" style="width:100%;height:100%;white-space:pre;font-family:monospace;"/>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit">Update</button>
					</footer>
				</form>
				<div>
					<section class="modal-card-body" id="task_section">
						<div class="tasks" id="task_list"/>
					</section>
					<footer class="modal-card-foot">
						<span class="tag is-medium" id="task_status"/>
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
					</footer>
				</div>
				<form action="/project/delete" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="delete_id" value=""/>
						<div class="field">
							<label class="label">Type "YES" to confirm</label>
							<div class="control">
								<input class="input" name="confirm" id="delete_confirm"/>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-danger" type="submit">Delete</button>
					</footer>
				</form>
			</div>
		</div>
	</div>
	<div class="modal" id="task_log">
		<div class="modal-background"/>
		<div class="modal-card" style="width:80%;">
			<header class="modal-card-head">
				<p class="modal-card-title">Task Log </p>
				<button class="delete" aria-label="close" onclick="hideTaskLogs()"/>
			</header>
			<section class="modal-card-body" id="task_section">
				<pre id="task_logs" style="color:black;background:white;white-space:pre-wrap;"/>
			</section>
			<footer class="modal-card-foot">
				<span class="tag is-medium" id="task_status"/>
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideTaskLogs()" type="reset">Close</button>
			</footer>
		</div>
	</div>
	<div class="modal" id="login">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/login" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Login</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
						<label class="label">User Name</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" name="username"/>
							</div>
						</div>
					</div>
				</div>
				<div class="field is-horizontal">
					<div class="field-label is-normal">
					<label class="label">Password</label>
					</div>
					<div class="field-body">
						<div class="field">
							<div class="control is-expanded">
								<input class="input" type="password" name="password"/>
							</div>
						</div>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogin()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Login</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="logout">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/logout" method="POST">
			<input type="hidden" name="redirect" value="/"/>
			<header class="modal-card-head">
				<p class="modal-card-title">Logout</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogout()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Logout</button>
			</footer>
		</form>
	</div>
	<nav class="navbar is-radiusless" role="navigation" aria-label="main navigation" style="position:sticky;top:0">
		<div class="navbar-brand">
			<a class="navbar-item" href="/">
				<img src="/favicon-96x96.png"/>
				<span class="is-size-4 ml-2 has-text-info has-text-weight-bold is-family-code">RACS</span>
			</a>
			<a class="navbar-item is-tab is-active" href="/">Projects</a>
			<a class="navbar-item is-tab" href="/credentials.xhtml">Credentials</a>
			<a class="navbar-item is-tab" href="/registries.xhtml">Registries</a>
			<a class="navbar-item is-tab" href="/tasks.xhtml">Tasks</a>
			<a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" id="navbar-burger">
				<span aria-hidden="true"></span>
				<span aria-hidden="true"></span>
				<span aria-hidden="true"></span>
			</a>
		</div>
		<div class="navbar-menu" id="navbar-menu">
			<div class="navbar-end">
				<div class="navbar-item has-dropdown is-hoverable">
					<a class="navbar-link" id="filter-label">Filter</a>
					<div class="navbar-dropdown">
						<div class="navbar-item">
							<form id="labels_dropdown"/>
						</div>
					</div>
				</div>
				<div class="navbar-item">
					<div class="field">
						<p class="control has-icons-left">
							<input class="input is-small" id="name-filter"/>
							<span class="icon is-left">
								<i class="fas fa-filter"/>
							</span>
						</p>
					</div>
				</div>
				<div class="navbar-item" id="out-actions" style="display:none;">
					<div class="buttons">
						<button class="button is-small is-primary" onclick="showLogin()">Login</button>
					</div>
				</div>
				<div class="navbar-item" id="in-actions" style="display:none;">
					<div class="buttons">
						<button class="button is-small" onclick="showCreate()">Create Project</button>
						<button class="button is-small is-danger" onclick="showLogout()">Logout</button>
					</div>
				</div>
			</div>
		</div>
	</nav>
	<div>
		<div id="projects"/>
	</div>
	<script type="text/javascript">
		let burger = document.getElementById("navbar-burger");
		burger.onclick = function(event) {
			let menu = document.getElementById("navbar-menu");
			burger.classList.toggle("is-active");
			menu.classList.toggle("is-active");
		}
		function build(event) {
			var stage = event.target.value;
			event.target.value = "";
			fetch(`/project/build?id=${this.id}&amp;stage=${stage}`);
		}

		function showCreate() {
			var modal = document.getElementById("create");
			modal.addClass("is-active");
		}

		function hideCreate() {
			var modal = document.getElementById("create");
			modal.removeClass("is-active");
		}

		function showSettingsTab(index) {
			var tabs = document.getElementById("project_settings_tabs");
			var container = document.getElementById("project_settings_container");
			for (var i = 0; i &lt; 8; ++i) {
				tabs.children[i].removeClass("is-active");
				container.children[i].style.display = "none";
			}
			tabs.children[index].addClass("is-active");
			container.children[index].style.display = null;
			if (index === 5) {
				var id = document.getElementById("config_id").value;
				var container = document.getElementById("config_list");
				var textarea = document.getElementById("config_text");
				while (container.firstChild) container.removeChild(container.firstChild);
				textarea.value = "";
				fetch(`/project/config/list?id=${id}`).then(response => response.json()).then(results => {
					results.forEach(result => {
						container.appendChild(create("tr", {"on-click": select.bind(null, result)},
							create("th.name", result.name)/*,
							create("td.size", result.size.toString()),
							create("td.time", result.time)*/
						));
					});
				});
				function select(result, event) {
					container.childNodes.forEach(node => node.removeClass("is-selected"));
					event.currentTarget.addClass("is-selected");
					var name = encodeURIComponent(result.name);
					document.getElementById("config_name").value = "config/" + result.name;
					fetch(`/project/config/read?id=${id}&amp;name=${name}`).then(response => response.text()).then(result => {
						console.log(result);
						textarea.value = result;
					});
				}
			} else if (index === 6) {
				var id = document.getElementById("config_id").value;
				var list = document.getElementById("task_list");
				while (list.firstChild) list.removeChild(list.firstChild);
				fetch(`/task/list?id=${id}`).then(response => response.json()).then(results => {
					results.forEach(result => {
						var task = {};
						task.icon = create("i.fa");
						task.state = create("span.icon", task.icon);
						switch (result.state) {
						case "RUNNING":
							task.icon.addClass("fa-cog");
							task.icon.addClass("fa-spin");
							task.state.addClass("has-text-info");
							break;
						case "SUCCESS":
							task.icon.addClass("fa-check-square");
							task.state.addClass("has-text-success");
							break;
						case "ERROR":
							task.icon.addClass("fa-exclamation-triangle");
							task.state.addClass("has-text-danger");
							break;
						}
						var time = result.time.split(" ");
						task.box = create("div.task", {"on-click": showTaskLogs.bind(result)},
							create("span.state", task.state),
							create("span.type", result.type),
							create("span.time", time[0], " ", time[1], " ")
						);
						list.appendChild(task.box);
					});
				});
			}
		}

		var stages = {
			CLEANING: "clean",
			CLONING: "clone",
			PREPARING: "prepare",
			PULLING: "pull",
			BUILDING: "build",
			PREPACKAGING: "prepackage",
			PACKAGING: "package",
			SCANNING: "scan",
			PUSHING: "push",
			TAGGING: "tag",
			DELETING: "delete"
		};

		function showSettings() {
			document.getElementById("update_id").value = this.id;
			document.getElementById("update_name").value = this.name;
			document.getElementById("update_labels").value = this.labels;
			document.getElementById("update_url").value = this.url;
			document.getElementById("update_branch").value = this.branch;
			document.getElementById("update_buildSpec").value = this.buildSpec;
			document.getElementById("update_prepackageSpec").value = this.prepackageSpec;
			document.getElementById("update_packageSpec").value = this.packageSpec;
			document.getElementById("update_protected").checked = this.protected;
			document.getElementById("update_tagRepo").checked = this.tagRepo;
			document.getElementById("upload_id").value = this.id;
			document.getElementById("destination_id").value = this.id;
			document.getElementById("trigger_id").value = this.id;
			document.getElementById("environment_id").value = this.id;
			document.getElementById("config_id").value = this.id;
			var destinations = document.getElementById("destination_table");
			while (destinations.firstChild) destinations.removeChild(destinations.firstChild);
			this.destinations.forEach(destination => {
				addDestination(destination[0].toString(), destination[1]);
			});
			var triggers = document.getElementById("trigger_table");
			while (triggers.firstChild) triggers.removeChild(triggers.firstChild);
			this.triggers.forEach(trigger => {
				addTrigger(trigger[0].toString(), stages[trigger[1]] || "none");
			});
			var environment = document.getElementById("environment_table");
			while (environment.firstChild) environment.removeChild(environment.firstChild);
			this.environment.forEach(binding => {
				addCredential(binding[0].toString(), binding[1], binding[2]);
			});
			document.getElementById("delete_id").value = this.id;
			document.getElementById("delete_confirm").value = "";
			var modal = document.getElementById("project_settings");
			modal.addClass("is-active");
			showSettingsTab(0);
			changeUploadType();
		}

		function hideProjectSettings() {
			var modal = document.getElementById("project_settings");
			modal.removeClass("is-active");
		}

		function changeUploadType() {
			let type = document.getElementById("upload_type").value;
			let container = document.getElementById("upload_value");
			if (type === "file") {
				var fileinput = create("input.file-input", {type: "file", name: "file"});
				var filename = create("span.file-name", {id: "filename"});
				var uploadname = document.getElementById("uploadname");
				container.replaceChildren(create("div.file.has-name",
					create("label.file-label",
						fileinput,
						create("span.file-cta",
							create("span.file-icon", create("i.fas.fa-upload")),
							create("span.file-label", "Choose a file ...")
						),
						filename
					)
				));
				fileinput.onchange = function(event) {
					filename.textContent = event.target.files[0].name;
					uploadname.value = event.target.files[0].name;
				}
			} else {
				container.replaceChildren(create("input.input", {type: "password", name: "value", id: "value"}));
			}
		}

		function addDestination(registry, tag) {
			var destinations = document.getElementById("destination_table");
			var registrySelect = create("select",
				create("option", {value: ""}, "--- Registry ---"),
				registries.map(registry => create("option", {value: registry.id.toString()}, registry.name))
			);
			var tagEntry = create("input.input");
			if (registry) registrySelect.value = registry.toString();
			if (tag) tagEntry.value = tag;
			var row = create("tr",
				create("td", create("div.select", registrySelect)),
				create("td", tagEntry),
				create("td", create("span.button.is-danger", {"on-click": remove}, "Remove"))
			);
			destinations.appendChild(row);
			function remove() {
				destinations.removeChild(row);
			}
		}

		function submitDestinations() {
			var destinations = document.getElementById("destination_table");
			var value = [];
			destinations.childNodes.forEach(child => {
				if (child.children[0].children[0].children[0].value !== "") value.push([
					child.children[0].children[0].children[0].value,
					child.children[1].children[0].value
				]);
			});
			document.getElementById("destination_destinations").value = value;
		}

		function addTrigger(target, stage) {
			var triggers = document.getElementById("trigger_table");
			var targetSelect = create("select",
				create("option", {value: ""}, "--- Project ---"),
				projects.map((project, id) => create("option", {value: id}, project.name))
			);
			var stageSelect = create("select",
				create("option", {value: "none"}, "--- Stage ---"),
				create("option", {value: "clean"}, "Clean"),
				create("option", {value: "clone"}, "Clone"),
				create("option", {value: "prepare"}, "Prepare"),
				create("option", {value: "pull"}, "Pull"),
				create("option", {value: "build"}, "Build"),
				create("option", {value: "prepackage"}, "Prepackage"),
				create("option", {value: "package"}, "Package"),
				create("option", {value: "scan"}, "Scan"),
				create("option", {value: "push"}, "Push"),
				create("option", {value: "tag"}, "Tag")
			);
			if (target) targetSelect.value = target;
			if (stage) stageSelect.value = stage;
			var row = create("tr",
				create("td", create("div.select", targetSelect)),
				create("td", create("div.select", stageSelect)),
				create("td", create("span.button.is-danger", {"on-click": remove}, "Remove"))
			);
			triggers.appendChild(row);
			function remove() {
				triggers.removeChild(row);
			}
		}

		function submitTriggers() {
			var triggers = document.getElementById("trigger_table");
			var value = [];
			triggers.childNodes.forEach(child => {
				if (child.children[0].children[0].children[0].value !== "") value.push([
					child.children[0].children[0].children[0].value,
					child.children[1].children[0].children[0].value
				]);
			});
			document.getElementById("trigger_triggers").value = value;
		}

		function addCredential(name, id, description) {
			var environment = document.getElementById("environment_table");
			var nameInput = create("input.input", {type: "text"});
			var credentialSelect = create("select",
				create("option", {value: ""}, "--- Credential ---"),
				credentials.map(credential => create("option", {value: credential.id}, credential.description))
			);
			if (name) nameInput.value = name;
			if (id) credentialSelect.value = id;
			var row = create("tr",
				create("td", nameInput),
				create("td", create("div.select", credentialSelect)),
				create("td", create("span.button.is-danger", {"on-click": remove}, "Remove"))
			);
			environment.appendChild(row);
			function remove() {
				environment.removeChild(row);
			}
		}

		function submitEnvironment() {
			var environment = document.getElementById("environment_table");
			var value = [];
			environment.childNodes.forEach(child => {
				if (child.children[0].children[0].value !== "") value.push([
					child.children[0].children[0].value,
					child.children[1].children[0].children[0].value
				]);
			});
			document.getElementById("environment_credentials").value = value;
		}

		function hideEnvironment() {
			var modal = document.getElementById("environment");
			modal.removeClass("is-active");
		}

		function showLogin() {
			var modal = document.getElementById("login");
			modal.addClass("is-active");
		}

		function hideLogin() {
			var modal = document.getElementById("login");
			modal.removeClass("is-active");
		}

		function showLogout() {
			var modal = document.getElementById("logout");
			modal.addClass("is-active");
		}

		function hideLogout() {
			var modal = document.getElementById("logout");
			modal.removeClass("is-active");
		}

		var ansi_up = new AnsiUp;
		var taskInterval = null;
		function showTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.addClass("is-active");
			var task = this.id;
			var container = document.getElementById("task_logs");
			var section = document.getElementById("task_section");
			var tag = document.getElementById("task_status");
			var logs = "";
			container.innerHTML = "";
			function fetchLogs() {
				fetch(`/task/logs?id=${task}&amp;offset=${logs.length}`).then(response => {
					var state = response.headers.get("X-Task-State");
					tag.textContent = state;
					tag.classList = "tag is-medium";
					switch (state) {
					case "RUNNING":
						tag.addClass("is-info");
						break;
					case "SUCCESS":
						tag.addClass("is-success");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					case "ERROR":
						tag.addClass("is-danger");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					}
					response.text().then(text => {
						logs += text;
						container.innerHTML = ansi_up.ansi_to_html(logs);
						section.scrollTop = section.scrollHeight;
					});
				});
			}
			fetchLogs();
			taskInterval = setInterval(fetchLogs, 1000);
		}

		function hideTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.removeClass("is-active");
			if (taskInterval !== null) {
				clearInterval(taskInterval);
				taskInterval = null;
			}
		}

		var container = document.getElementById("projects");
		var projects = [];
		var tasks = [];
		var registries = [];
		var credentials = [];

		function updateTask(project, result) {
			var task = tasks[result.id];
			if (!task) {
				task = tasks[result.id] = {};
				task.icon = create("i");
				task.state = create("span.icon", task.icon);
				var time = result.time.split(" ");
				task.box = create("div.task", {"on-click": showTaskLogs.bind(result)},
					create("span.state", task.state),
					create("span.type", result.type),
					create("span.time", time[0], " ", time[1], " ")
				);
				project.tasks.appendChild(task.box);
				while (project.tasks.children.length > 5) {
					project.tasks.removeChild(project.tasks.firstChild);
				}
				//project.tasks.scrollIntoView(false);
			}
			task.icon.classList = "fas";
			task.state.classList = "icon";
			//task.box.classList = "task notification mb-0 ml-2 p-2 is-light";
			var card = project.card;
			card.classList = "project";
			project.state.removeClass("is-info");
			project.state.removeClass("is-success");
			project.state.removeClass("is-danger");
			switch (result.state) {
			case "RUNNING":
				project.state.addClass("is-info");
				task.icon.addClass("fa-cog");
				task.icon.addClass("fa-spin");
				task.state.addClass("has-text-info");
				break;
			case "SUCCESS":
				project.state.addClass("is-success");
				task.icon.addClass("fa-check-square");
				task.state.addClass("has-text-success");
				break;
			case "ERROR":
				project.state.addClass("is-danger");
				task.icon.addClass("fa-exclamation-triangle");
				task.state.addClass("has-text-danger");
				break;
			}
			var container = project.tasks; /*.parentNode;*/
			container.scrollTop = container.scrollHeight;
		}

		document.getElementById("name-filter").oninput = filterProjects;

		var filter = JSON.parse(sessionStorage.getItem("filter") || "{}");
		var labels = {};

		function labelTag(label) {
			var info = labels[label];
			if (!info) {
				var hash = 0;
				for (var i = 0; i &lt; label.length; ++i) {
					hash += 31;
					hash *= label.charCodeAt(i);
					hash %= 180;
				}
				var input = create("input", {type: "checkbox"});
				info = labels[label] = {
					colour: `hsl(${hash * 2},100%,30%)`,
					checked: input.checked
				};
				input.onchange = function() {
					filter[label] = info.checked = input.checked;
					filterProjects();
				}
				document.getElementById("labels_dropdown").appendChild(
					create("div.field",
						create("div.control",
							create("label.checkbox", input, " ", label)
						)
					)
				);
				info.checked = input.checked = !!filter[label];
			}
			var tag = create("span", {style: `background:${info.colour};`}, label);
			return tag;
		}

		function filterProjects() {
			var nameFilter = document.getElementById("name-filter").value.toLowerCase();
			function visible(element) {
				for (var label in labels) {
					if (labels[label].checked &amp;&amp; (element.labels.indexOf(label) === -1)) {
						return false;
					}
				}
				if (element.name.indexOf(nameFilter) === -1) return false;
				return true;
			}
			var cards = container.children;
			for (var i = 0; i &lt; cards.length; ++i) {
				cards[i].style.setProperty("display", visible(cards[i]) ? null : "none", "important");
			}
			var filterCount = 0;
			for (var label in labels) if (labels[label].checked) {
				filterCount++;
			}
			sessionStorage.setItem("filter", JSON.stringify(filter));
			var filterLabel = document.getElementById("filter-label");
			if (filterCount > 0) {
				filterLabel.textContent = `Filter (${filterCount})`;
			} else {
				filterLabel.textContent = "Filter";
			}
		}

		const taskTypes = {
			DELETING: -3,
			DELETE_ERROR: -2,
			DELETE_SUCCESS: -1,
			NONE: 0,
			CREATING: 1,
			CREATE_ERROR: 2,
			CREATE_SUCCESS: 3,
			CLEANING: 4,
			CLEAN_ERROR: 5,
			CLEAN_SUCCESS: 6,
			CLONING: 7,
			CLONE_ERROR: 8,
			CLONE_SUCCESS: 9,
			PREPARING: 10,
			PREPARE_ERROR: 11,
			PREPARE_SUCCESS: 12,
			PULLING: 13,
			PULL_ERROR: 14,
			PULL_SUCCESS: 15,
			BUILDING: 16,
			BUILD_ERROR: 17,
			BUILD_SUCCESS: 18,
			PREPACKAGING: 19,
			PREPACKAGE_ERROR: 20,
			PREPACKAGE_SUCCESS: 21,
			PACKAGING: 22,
			PACKAGE_ERROR: 23,
			PACKAGE_SUCCESS: 24,
			SCANNING: 25,
			SCAN_ERROR: 26,
			SCAN_SUCCESS: 27,
			PUSHING: 28,
			PUSH_ERROR: 29,
			PUSH_SUCCESS: 30,
			TAGGING: 31,
			TAG_ERROR: 32,
			TAG_SUCCESS: 33
		};

		function updateProject(result) {
			var project = projects[result.id];
			if (!project) {
				project = projects[result.id] = {
					state: create("progress.progress.has-border", {max: taskTypes.TAG_SUCCESS}),
					tasks: create("div.tasks"),
					version: create("span")
				};
				project.name = result.name;
				var buildSelect = create("select", {"on-change": build.bind(result)},
					create("option", {value: "", style: "color:red;"}, "--- Build ---"),
					create("option", {value: "clean"}, "Clean"),
					create("option", {value: "clone"}, "Clone"),
					create("option", {value: "prepare"}, "Prepare"),
					create("option", {value: "pull"}, "Pull"),
					create("option", {value: "build"}, "Build"),
					create("option", {value: "prepackage"}, "Prepackage"),
					create("option", {value: "package"}, "Package"),
					create("option", {value: "scan"}, "Scan"),
					create("option", {value: "push"}, "Push"),
					create("option", {value: "tag"}, "Tag")
				);
				if (result.protected &amp;&amp; window.user === "") {
					buildSelect.disabled = true;
				}
				var buildMenu = create("span.select.is-small.is-primary",
					{style: "margin-bottom: 0.5rem"},
					buildSelect
				);
				var labelTags = [];
				var labels = [];
				result.labels.split(",").forEach(label => {
					var trimmed = label.trim().toUpperCase();
					if (trimmed.length > 0) {
						labels.push(trimmed);
						labelTags.push(labelTag(trimmed));
					}
				});
				var name = create("a.name", "#" + result.id + " " + result.name);
				project.card = create("div.project",
					create("div.details", name, create("span.version", project.version)),
					create("div.tags", labelTags),
					project.tasks,
					create("div.build-menu", buildMenu),
					create("div", project.state)
				);
				project.card.name = result.name.toLowerCase();
				project.card.labels = labels;
				name.onclick = showSettings.bind(result);
				container.appendChild(project.card);
			}
			for (var key in result) {
				switch (key) {
				case "state": {
					/*project.state.textContent = result.state;
					project.state.classList = "tag";*/
					project.state.value = taskTypes[result.state];
					/*if (result.state.endsWith("_SUCCESS")) {
						project.state.addClass("is-success");
					} else if (result.state.endsWith("_ERROR")) {
						project.state.addClass("is-danger");
					} else {
						project.state.addClass("is-info");
					}*/
					break;
				}
				case "tasks": {
					result.tasks.forEach(result => updateTask(project, result));
					break;
				}
				case "version": {
					project.version.textContent = result.version.toString();
					break;
				}
				}
			}
			filterProjects();
		}

		function updateRegistry(registry) {
			registries[registry.id] = registry;
		}

		var events = null, fetchInterval = null;

		fetch("/user/current").then(response => response.text()).then(name => {
			console.log("User = ", name);
			window.user = name;
			var inActions = document.getElementById("in-actions");
			var outActions = document.getElementById("out-actions");
			if (name) {
				inActions.style.display = null;
				outActions.style.display = "none";
			} else {
				inActions.style.display = "none";
				outActions.style.display = null;
			}

			fetchInterval = setInterval(fetchConfig, 1000);
			fetchConfig();
		});

		function connectEvents() {
			events = new EventSource("/events");
			events.onopen = function() {
				console.log("Events opened, clearing interval");
				if (fetchInterval !== null) {
					clearInterval(fetchInterval);
					fetchInterval = null;
				}
			}
			events.onmessage = function(e) {
				var event = JSON.parse(e.data);
				console.log(event);
				switch (event.event) {
				case "project/list":
					event.projects.forEach(updateProject);
					break;
				case "project/create":
				case "project/state":
				case "project/version":
					updateProject(event);
					break;
				case "task/create":
				case "task/state": {
					var project = projects[event.project];
					if (project) updateTask(project, event);
					break;
				}
				}
			}
			events.onerror = function() {
				events = null;
				if (fetchInterval === null) {
					fetchInterval = setInterval(fetchConfig, 1000);
				}
			}
		}

		function fetchConfig() {
			fetch("/project/list").then(response => response.json()).then(results => {
				results.forEach(updateProject);
				if (events === null) connectEvents();
			});
			fetch("/registry/list").then(response => response.json()).then(results => {
				results.forEach(updateRegistry);
			});
			fetch("/credential/list").then(response => response.json()).then(results => {
				credentials = results;
			});
		}
	</script>
</body>
</html>
