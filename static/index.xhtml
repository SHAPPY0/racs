<html lang="en" xmlns="http://www.w3.org/1999/xhtml"> 
<head>
	<meta charset="utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<link rel="stylesheet" href="/bulma.min.css"/>
	<link rel="stylesheet" href="/bulmaswatch.min.css"/>
	<link rel="stylesheet" href="/css/all.min.css"/>
	<script src="/lib.js" type="text/javascript"/>
	<script src="/ansi_up.js" type="text/javascript"/>
	<link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png"/>
	<link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png"/>
	<link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png"/>
	<link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png"/>
	<link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png"/>
	<link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png"/>
	<link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png"/>
	<link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png"/>
	<link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png"/>
	<link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png"/>
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"/>
	<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png"/>
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"/>
	<link rel="manifest" href="/manifest.json"/>
	<meta name="msapplication-TileColor" content="#ffffff"/>
	<meta name="msapplication-TileImage" content="/ms-icon-144x144.png"/>
	<meta name="theme-color" content="#ffffff"/>
</head>
<body class="has-background-warning-light" style="min-height:100vh;padding:0;">
	<div class="modal" id="create">
		<div class="modal-background"/>
		<form class="modal-card" action="/project/create" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Create Project</p>
				<button class="delete" aria-label="close" onclick="hideCreate()" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field">
					<label class="label">Name</label>
					<div class="control">
						<input class="input" name="name"/>
					</div>
				</div>
				<div class="field">
					<label class="label">URL</label>
					<div class="control">
						<input class="input" name="url"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Branch</label>
					<div class="control">
						<input class="input" name="branch"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Destination</label>
					<div class="control">
						<input class="input" name="destination"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Tag</label>
					<div class="control">
						<input class="input" name="tag"/>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideCreate()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Create</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="project_settings">
		<div class="modal-background"/>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title">
					<div class="tabs is-centered is-toggle">
						<ul id="project_settings_tabs">
							<li><a onclick="showSettingsTab(0)">Settings</a></li>
							<li><a onclick="showSettingsTab(1)">Upload</a></li>
							<li><a onclick="showSettingsTab(2)">Triggers</a></li>
							<li><a onclick="showSettingsTab(3)">Delete</a></li>
						</ul>
					</div>
				</p>
				<button class="delete" aria-label="close" onclick="hideProjectSettings()" type="reset"/>
			</header>
			<div id="project_settings_container">
				<form action="/project/update" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="update_id" value=""/>
						<div class="field">
							<label class="label">Name</label>
							<div class="control">
								<input class="input" name="name" id="update_name"/>
							</div>
						</div>
						<div class="field">
							<label class="label">URL</label>
							<div class="control">
								<input class="input" name="url" id="update_url"/>
							</div>
						</div>
						<div class="field">
							<label class="label">Branch</label>
							<div class="control">
								<input class="input" name="branch" id="update_branch"/>
							</div>
						</div>
						<div class="field">
							<label class="label">Destination</label>
							<div class="control">
								<input class="input" name="destination" id="update_destination"/>
							</div>
						</div>
						<div class="field">
							<label class="label">Tag</label>
							<div class="control">
								<input class="input" name="tag" id="update_tag"/>
							</div>
						</div>
						<div class="field">
							<label class="label">BuildSpec</label>
							<div class="control">
								<input class="input" name="buildSpec" id="update_buildSpec"/>
							</div>
						</div>
						<div class="field">
							<label class="label">PackageSpec</label>
							<div class="control">
								<input class="input" name="packageSpec" id="update_packageSpec"/>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit">Update</button>
					</footer>
				</form>
				<form action="/project/upload" method="POST" enctype="multipart/form-data">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="upload_id" value=""/>
						<div class="field">
							<label class="label">Name</label>
							<div class="control">
								<input class="input" name="name" id="uploadname"/>
							</div>
						</div>
						<div class="field">
							<label class="label">Type</label>
							<div class="field-body" style="clear:both;">
								<div class="field is-narrow">
									<div class="control">
										<div class="select" autocomplete="off">
											<select onchange="changeUploadType(event)">
												<option value="file" selected="true">File</option>
												<option value="text">Text</option>
											</select>
										</div>
									</div>
								</div>
								<div class="field">
									<div class="control" id="upload_value">
										<div class="file has-name">
											<label class="file-label">
												<input class="file-input" type="file" name="file" id="fileinput"/>
												<span class="file-cta">
													<span class="file-icon"><i class="fas fa-upload"/></span>
													<span class="file-label">Choose a file...</span>
												</span>
												<span class="file-name" id="filename"/>
											</label>
										</div>
									</div>
								</div>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit">Upload</button>
					</footer>
				</form>
				<form action="/project/triggers" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="trigger_id" value=""/>
						<input type="hidden" name="triggers" id="trigger_triggers" value=""/>
						<table class="table is-fullwidth">
							<tbody id="trigger_table"/>
						</table>
					</section>
					<footer class="modal-card-foot">
						<span class="button is-info" onclick="addTrigger()">Add Trigger</span>
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-primary" type="submit" onclick="submitTriggers()">Update</button>
					</footer>
				</form>
				<form action="/project/delete" method="POST">
					<section class="modal-card-body">
						<input type="hidden" name="redirect" value="/"/>
						<input type="hidden" name="id" id="delete_id" value=""/>
						<div class="field">
							<label class="label">Type "YES" to confirm</label>
							<div class="control">
								<input class="input" name="confirm" id="delete_confirm"/>
							</div>
						</div>
					</section>
					<footer class="modal-card-foot">
						<span style="flex:1 1;"/>
						<button class="button" onclick="hideProjectSettings()" type="reset">Cancel</button>
						<button class="button is-danger" type="submit">Delete</button>
					</footer>
				</form>
			</div>
		</div>
	</div>
	<div class="modal" id="task_log">
		<div class="modal-background"/>
		<div class="modal-card" style="width:80%;">
			<header class="modal-card-head">
				<p class="modal-card-title">Task Log </p>
				<button class="delete" aria-label="close" onclick="hideTaskLogs()"/>
			</header>
			<section class="modal-card-body" id="task_section">
				<pre id="task_logs" style="color:black;background:white;white-space:pre-wrap;"/>
			</section>
			<footer class="modal-card-foot">
				<span class="tag is-medium" id="task_status"/>
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideTaskLogs()" type="reset">Close</button>
			</footer>
		</div>
	</div>
	<div class="modal" id="registry">
		<div class="modal-background"/>
		<form class="modal-card" action="/registry/create" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Add/Update Registry</p>
				<button class="delete" aria-label="close" onclick="hideRegistry()" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field">
					<label class="label">Name</label>
					<div class="control">
						<input class="input" name="name"/>
					</div>
				</div>
				<div class="field">
					<label class="label">URL</label>
					<div class="control">
						<input class="input" name="url"/>
					</div>
				</div>
				<div class="field">
					<label class="label">User</label>
					<div class="control">
						<input class="input" name="user"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Password</label>
					<div class="control">
						<input class="input" type="password" name="password"/>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideRegistry()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Add/Update</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="login">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/login" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Login</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/"/>
				<div class="field">
					<label class="label">User Name</label>
					<div class="control">
						<input class="input" name="username"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Password</label>
					<div class="control">
						<input class="input" type="password" name="password"/>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogin()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Login</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="logout">
		<div class="modal-background"/>
		<form class="modal-card" action="/user/logout" method="POST">
			<input type="hidden" name="redirect" value="/"/>
			<header class="modal-card-head">
				<p class="modal-card-title">Login</p>
				<button class="delete" aria-label="close" type="reset"/>
			</header>
			<footer class="modal-card-foot">
				<span style="flex:1 1;"/>
				<button class="button" onclick="hideLogout()" type="reset">Cancel</button>
				<button class="button is-primary" type="submit">Logout</button>
			</footer>
		</form>
	</div>
	<nav class="navbar" role="navigation" aria-label="main navigation">
		<div class="navbar-brand">
			<a class="navbar-item" href="/">
				<img src="/favicon-96x96.png"/>
				<span class="is-size-4 ml-2 has-text-info has-text-weight-bold is-family-code">RACS</span>
			</a>
		</div>
		<div class="navbar-end">
			<div class="navbar-item" id="out-actions" style="display:none;">
				<div class="buttons">
					<button class="button is-small is-primary" onclick="showLogin()">Login</button>
				</div>
			</div>
			<div class="navbar-item" id="in-actions" style="display:none;">
				<div class="buttons">
					<button class="button is-small" onclick="showRegistry()">Add/Update Registry</button>
					<button class="button is-small" onclick="showCreate()">Create Project</button>
					<button class="button is-small is-danger" onclick="showLogout()">Logout</button>
				</div>
			</div>
		</div>
	</nav>
	<div style="display:flex;flex-wrap:wrap;" id="projects"/>
	<script type="text/javascript">
		function build(event) {;
			var stage = event.target.value;
			event.target.value = "";
			fetch(`/project/build?id=${this.id}&amp;stage=${stage}`);
		}
		
		function showRegistry() {
			var modal = document.getElementById("registry");
			modal.addClass("is-active");
		}
		
		function hideRegistry() {
			var modal = document.getElementById("registry");
			modal.removeClass("is-active");
		}
		
		function showCreate() {
			var modal = document.getElementById("create");
			modal.addClass("is-active");
		}
		
		function hideCreate() {
			var modal = document.getElementById("create");
			modal.removeClass("is-active");
		}

		function showSettingsTab(index) {
			var tabs = document.getElementById("project_settings_tabs");
			var container = document.getElementById("project_settings_container");
			for (var i = 0; i &lt; 4; ++i) {
				tabs.children[i].removeClass("is-active");
				container.children[i].style.display = "none";
			}
			tabs.children[index].addClass("is-active");
			container.children[index].style.display = null;
		}
		
		var stages = {
			CLEANING: "clean",
			CLONING: "clone",
			PREPARING: "prepare",
			PULLING: "pull",
			BUILDING: "build",
			PACKAGING: "package",
			PUSHING: "push",
			DELETING: "delete"
		};
		
		function showProjectSettings() {
			document.getElementById("update_id").value = this.id;
			document.getElementById("update_name").value = this.name;
			document.getElementById("update_url").value = this.url;
			document.getElementById("update_branch").value = this.branch;
			document.getElementById("update_destination").value = this.destination;
			document.getElementById("update_tag").value = this.tag;
			document.getElementById("update_buildSpec").value = this.buildSpec;
			document.getElementById("update_packageSpec").value = this.packageSpec;
			document.getElementById("upload_id").value = this.id;
			document.getElementById("trigger_id").value = this.id;
			var triggers = document.getElementById("trigger_table");
			while (triggers.firstChild) triggers.removeChild(triggers.firstChild);
			this.triggers.forEach(trigger => {
				addTrigger(trigger[0].toString(), stages[trigger[1]] || "none");
			});
			document.getElementById("delete_id").value = this.id;
			document.getElementById("delete_confirm").value = "";
			var modal = document.getElementById("project_settings");
			modal.addClass("is-active");
			showSettingsTab(0);
		}

		function hideProjectSettings() {
			var modal = document.getElementById("project_settings");
			modal.removeClass("is-active");
		}
		
		function changeUploadType(event) {
			let type = event.target.value;
			let container = document.getElementById("upload_value");
			if (type === "file") {
				container.replaceChildren(create("div.file.has-name",
					create("label.file-label",
						create("input.file-input", {type: "file", name: "file", id: "fileinput"}),
						create("span.file-cta",
							create("span.file-icon", create("i.fas.fa-upload")),
							create("span.file-label", "Choose a file ...")
						),
						create("span.file-name", {id: "filename"})
					)
				));
			} else {
				container.replaceChildren(create("input.input", {type: "password", name: "value", id: "value"}));
			}
		}

		function addTrigger(target, stage) {
			var triggers = document.getElementById("trigger_table");
			var targetSelect = create("select",
				create("option", {value: ""}, "--- Project ---"),
				projects.map((project, id) => create("option", {value: id}, project.name))
			);
			var stageSelect = create("select",
				create("option", {value: "none"}, "--- Stage ---"),
				create("option", {value: "clean"}, "Clean"),
				create("option", {value: "clone"}, "Clone"),
				create("option", {value: "prepare"}, "Prepare"),
				create("option", {value: "pull"}, "Pull"),
				create("option", {value: "build"}, "Build"),
				create("option", {value: "package"}, "Package"),
				create("option", {value: "push"}, "Push")
			);
			if (target) targetSelect.value = target;
			if (stage) stageSelect.value = stage;
			var row = create("tr",
				create("td", create("div.select", targetSelect)),
				create("td", create("div.select", stageSelect)),
				create("td", create("span.button.is-danger", {"on-click": remove}, "Remove"))
			);
			triggers.appendChild(row);
			function remove() {
				triggers.removeChild(row);
			}
		}
		
		function submitTriggers() {
			var triggers = document.getElementById("trigger_table");
			var value = [];
			triggers.childNodes.forEach(child => {
				if (child.children[0].children[0].children[0].value !== "") value.push([
					child.children[0].children[0].children[0].value,
					child.children[1].children[0].children[0].value
				]);
			});
			document.getElementById("trigger_triggers").value = value;
		}
		
		function hideTriggers() {
			var modal = document.getElementById("triggers");
			modal.removeClass("is-active");
		}
		
		function showLogin() {
			var modal = document.getElementById("login");
			modal.addClass("is-active");
		}
		
		function hideLogin() {
			var modal = document.getElementById("login");
			modal.removeClass("is-active");
		}
		
		function showLogout() {
			var modal = document.getElementById("logout");
			modal.addClass("is-active");
		}
		
		function hideLogout() {
			var modal = document.getElementById("logout");
			modal.removeClass("is-active");
		}
		
		var ansi_up = new AnsiUp;
		var taskInterval = null;
		function showTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.addClass("is-active");
			var task = this.id;
			var container = document.getElementById("task_logs");
			var section = document.getElementById("task_section");
			var tag = document.getElementById("task_status");
			var logs = "";
			container.innerHTML = "";
			function fetchLogs() {
				fetch(`/task/logs?id=${task}&amp;offset=${logs.length}`).then(response => {
					var state = response.headers.get("X-Task-State");
					tag.textContent = state;
					tag.classList = "tag is-medium";
					switch (state) {
					case "RUNNING":
						tag.addClass("is-info");
						break;
					case "SUCCESS":
						tag.addClass("is-success");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					case "ERROR":
						tag.addClass("is-danger");
						clearInterval(taskInterval);
						taskInterval = null;
						break;
					}
					response.text().then(text => {
						logs += text;
						container.innerHTML = ansi_up.ansi_to_html(logs);
						section.scrollTop = section.scrollHeight;
					});
				});
			}
			fetchLogs();
			taskInterval = setInterval(fetchLogs, 1000);
		}
		
		function hideTaskLogs() {
			var modal = document.getElementById("task_log");
			modal.removeClass("is-active");
			if (taskInterval !== null) {
				clearInterval(taskInterval);
				taskInterval = null;
			}
		}
		
		var filename = document.getElementById("filename");
		var uploadname = document.getElementById("uploadname");
		document.getElementById("fileinput").onchange = function(event) {
			filename.textContent = event.target.files[0].name;
			uploadname.value = event.target.files[0].name;
		}
		
		var container = document.getElementById("projects");
		var projects = [];
		var tasks = [];
		
		function updateTask(project, result) {
			var task = tasks[result.id];
			if (!task) {
				task = tasks[result.id] = {};
				task.icon = create("i");
				task.state = create("span.icon", task.icon);
				var time = result.time.split(" ");
				task.box = create("div", {
					style: "display: inline-block;",
					"on-click": showTaskLogs.bind(result)
				},
					create("div.mb-2", task.state, " ", create("span", result.type)),
					create("div", time[0], " ", time[1]),
				);
				project.tasks.appendChild(task.box);
				while (project.tasks.children.length > 5) {
					project.tasks.removeChild(project.tasks.firstChild);
				}
			}
			task.icon.classList = "fas";
			task.box.classList = "notification mb-0 ml-2 p-2";
			switch (result.state) {
			case "RUNNING":
				task.box.addClass("is-info");
				task.icon.addClass("fa-spinner");
				task.icon.addClass("fa-spin");
				break;
			case "SUCCESS":
				task.box.addClass("is-success");
				task.icon.addClass("fa-check-square");
				break;
			case "ERROR":
				task.box.addClass("is-danger");
				task.icon.addClass("fa-exclamation-triangle");
				break;
			}
		}
		
		function updateProject(result) {
			var project = projects[result.id];
			if (!project) {
				project = projects[result.id] = {
					state: create("span.tag"),
					tasks: create("div", {style: "white-space: nowrap; overflow: auto;"}),
					version: create("span")
				};
				project.name = result.name;
				var buildMenu = create("span.select.is-small.is-primary",
					{style: "margin-bottom: 0.5rem"},
					create("select", {"on-change": build.bind(result)},
						create("option", {value: "", style: "color:red;"}, "--- Build ---"),
						create("option", {value: "clean"}, "Clean"),
						create("option", {value: "clone"}, "Clone"),
						create("option", {value: "prepare"}, "Prepare"),
						create("option", {value: "pull"}, "Pull"),
						create("option", {value: "build"}, "Build"),
						create("option", {value: "package"}, "Package"),
						create("option", {value: "push"}, "Push")
					)
				);
				container.appendChild(create("div.card.p-1.m-1.is-flex.is-flex-wrap-nowrap",
					{style: "flex-grow: 1; flex-basis: 0;"},
					create("span.is-flex-grow-1", {style: "display:inline-block"},
						create("div.mb-2.has-text-weight-bold.is-size-6", "#" + result.id + " " + result.name),
						create("div",
							buildMenu,
							" ",
							create("button.button.is-small", {"on-click": showProjectSettings.bind(result)},
								create("span.icon", create("i.fas.fa-tools"))
							)
						)
					),
					create("span", {style: "display:inline-block"},
						create("div", "Version"),
						create("span.tag.is-success.is-large", project.version)
					),
					create("span", {style: "display:inline-block"},
						project.tasks
					)
				));
			}
			for (var key in result) {
				switch (key) {
				case "state": {
					project.state.textContent = result.state;
					project.state.classList = "tag";
					if (result.state.endsWith("_SUCCESS")) {
						project.state.addClass("is-success");
					} else if (result.state.endsWith("_ERROR")) {
						project.state.addClass("is-danger");
					} else {
						project.state.addClass("is-info");
					}
					break;
				}
				case "tasks": {
					result.tasks.forEach(result => updateTask(project, result));
					break;
				}
				case "version": {
					project.version.textContent = result.version.toString();
					break;
				}
				}
			}
		}
		
		function fetchProjects() {
			fetch("/project/list").then(response => response.json()).then(results => {
				results.forEach(updateProject);
			});
		}
		
		fetch("/user/current").then(response => response.text()).then(name => {
			console.log("User = ", name);
			var inActions = document.getElementById("in-actions");
			var outActions = document.getElementById("out-actions");
			if (name) {
				inActions.style.display = null;
				outActions.style.display = "none";
			} else {
				inActions.style.display = "none";
				outActions.style.display = null;
			}
		});
		fetchProjects();
		var fetchInterval = setInterval(fetchProjects, 1000);
		var events = new EventSource("/project/events");
		events.onopen = function() {
			console.log("Events opened, clearing interval");
			clearInterval(fetchInterval);
		}
		events.onmessage = function(e) {
			var event = JSON.parse(e.data);
			console.log(event);
			switch (event.event) {
			case "project/list":
				event.projects.forEach(updateProject);
				break;
			case "project/create":
			case "project/state":
			case "project/version":
				updateProject(event);
				break;
			case "task/create":
			case "task/state": {
				var project = projects[event.project];
				if (project) updateTask(project, event);
				break;
			}
			}
		}
	</script>
</body>
</html>
