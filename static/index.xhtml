<html lang="en" xmlns="http://www.w3.org/1999/xhtml"> 
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<link rel="stylesheet" href="/bulma.min.css"/>
	<script src="lib.js"/>
</head>
<body>
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Name</th>
				<th>State</th>
				<th>Task</th>
				<th>Version</th>
				<th>Upload</th>
				<th>Build</th>
			</tr>
		</thead>
		<tbody id="projects"/>
	</table>
	<div>
		<button class="button is-link" onclick="showCreate()">Create Project</button>
	</div>
	<div class="modal" id="create">
		<div class="modal-background"/>
		<form class="modal-card" action="/project/create" method="POST">
			<header class="modal-card-head">
				<p class="modal-card-title">Create Project</p>
				<button class="delete" aria-label="close" onclick="hideCreate()" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/index.xhtml"/>
				<div class="field">
					<label class="label">Name</label>
					<div class="control">
						<input class="input" name="name"/>
					</div>
				</div>
				<div class="field">
					<label class="label">URL</label>
					<div class="control">
						<input class="input" name="url"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Branch</label>
					<div class="control">
						<input class="input" name="branch"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Destination</label>
					<div class="control">
						<input class="input" name="destination"/>
					</div>
				</div>
				<div class="field">
					<label class="label">Tag</label>
					<div class="control">
						<input class="input" name="tag"/>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<button class="button is-success" type="submit">Create</button>
			</footer>
		</form>
	</div>
	<div class="modal" id="upload">
		<div class="modal-background"/>
		<form class="modal-card" action="/project/upload" method="POST" enctype="multipart/form-data">
			<header class="modal-card-head">
				<p class="modal-card-title">Create Project</p>
				<button class="delete" aria-label="close" onclick="hideUpload()" type="reset"/>
			</header>
			<section class="modal-card-body">
				<input type="hidden" name="redirect" value="/index.xhtml"/>
				<input type="hidden" name="id" id="upload_id" value=""/>
				<div class="field">
					<div class="file has-name">
						<label class="file-label">
							<input class="file-input" type="file" name="file" id="fileinput"/>
							<span class="file-cta">
								<span class="file-icon"><i class="fas fa-upload"/></span>
								<span class="file-label">Choose a file...</span>
							</span>
							<span class="file-name" id="filename"/>
						</label>
					</div>
				</div>
				<div class="field">
					<label class="label">Name</label>
					<div class="control">
						<input class="input" name="name" id="uploadname"/>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<button class="button is-link" type="submit">Upload</button>
			</footer>
		</form>
	</div>
	<script type="text/javascript">
		var container = document.getElementById("projects");
		var projects = [];
		function fetchProjects() {
			fetch("/project/list").then(response => response.json()).then(results => {
				results.forEach(result => {
					var project = projects[result.id];
					if (!project) {
						project = projects[result.id] = {
							state: create("td"),
							tasks: create("td"),
							version: create("td")
						};
						container.appendChild(create("tr",
							create("td", result.id.toString()),
							create("td", result.name),
							create("td", project.state),
							create("td", project.tasks),
							create("td", project.version),
							create("td",
								create("button.button.is-small.is-link", {"on-click": showUpload.bind(result)}, "Upload"),
							),
							create("td",
								create("div.select.is-small.is-primary",
									create("select", {"on-change": build.bind(result)},
										create("option", {value: ""}, "--- Stage ---"),
										create("option", {value: "clean"}, "Clean"),
										create("option", {value: "prepare"}, "Prepare"),
										create("option", {value: "pull"}, "Pull"),
										create("option", {value: "build"}, "Build"),
										create("option", {value: "package"}, "Package")
									)
								)
							)
						));
					}
					project.state.textContent = result.state;
					project.tasks.removeChildren();
					project.tasks.appendChild(create("table",
						result.tasks.map(task => create("tr",
							create("td", create("a", {href: `/log.xhtml?task=${task.id}`}, task.id.toString())),
							create("td", task.type),
							create("td", task.state),
							create("td", task.time)
						))
					));
					project.version.textContent = result.version.toString();
				});
			});
		}
		
		function build(event) {;
			var stage = event.target.value;
			event.target.value = "";
			fetch(`/project/build?id=${this.id}&amp;stage=${stage}`);
		}
		
		function showCreate() {
			var modal = document.getElementById("create");
			modal.addClass("is-active");
		}
		
		function hideCreate(event) {
			var modal = document.getElementById("create");
			modal.removeClass("is-active");
		}
		
		function showUpload() {
			var modal = document.getElementById("upload");
			modal.addClass("is-active");
			document.getElementById("upload_id").value = this.id;
		}
		
		function hideUpload(event) {
			var modal = document.getElementById("upload");
			modal.removeClass("is-active");
		}
		
		var filename = document.getElementById("filename");
		var uploadname = document.getElementById("uploadname");
		document.getElementById("fileinput").onchange = function(event) {
			filename.textContent = event.target.files[0].name;
			uploadname.value = event.target.files[0].name;
		}
		
		fetchProjects();
		setInterval(fetchProjects, 1000);
	</script>
</body>
</html>
