gir: glib("GLib")
gir: soup("Soup")
gir: gobject("GObject")

def (sqlite) in library("sqlite")
library("zlog")::logger: log()

sqlite: DB("main.db", sqlite::open::READWRITE + sqlite::open::CREATE)

DB:execute('CREATE TABLE IF NOT EXISTS users(
	name STRING PRIMARY KEY,
	passwd STRING,
	salt STRING,
	role STRING
)')

DB:execute('CREATE TABLE IF NOT EXISTS projects(
	id INTEGER PRIMARY KEY,
	name STRING,
	source STRING,
	branch STRING,
	state STRING,
	task INTEGER
)')

DB:execute('CREATE TABLE IF NOT EXISTS tasks(
	id INTEGER PRIMARY KEY,
	project INTEGER,
	type STRING
)')

DB:execute('CREATE TABLE IF NOT EXISTS members(
	project INTEGER,
	user STRING,
	role STRING
)')

do
	DB:execute('insert into users(name, passwd, salt, role) values(?, ?, ?, ?)', 'Bob1', "******", "", "admin")
on Error do
	log::error(Error)
end

for Row in DB:execute("select * from users") do
	print(Row, "\n")
end

let Loop := glib::MainLoop::new(nil, nil)

:<let (_, Pid, In, Out, Err) := glib::spawn_async_with_pipes(".", ["/usr/bin/ls"], [], glib::SpawnFlags::do_not_reap_child, nil)

glib::child_watch_add(200, Pid;) do
	print('Pid event\n')
	glib::spawn_close_pid(Pid)
end>:

enum: state("status", [
	"CLONING", "CLONE_SUCCESS", "CLONE_ERROR",
	"PREPARING", "PREPARE_SUCCESS", "PREPARE_ERROR",
	"PULLING", "PULL_SUCCESS", "PULL_ERROR",
	"BUILDING", "BUILD_SUCCESS", "BUILD_ERROR"
])

def Projects := {}
def ProjectPath := glib::canonicalize_filename("projects", nil)

let ProjectLoadStmt := DB:statement("SELECT name, state FROM projects WHERE id = ?")
let ProjectCreateStmt := DB:statement("INSERT INTO projects(name, source, branch, state) VALUES(?, ?, ?, 'CLONING') RETURNING id")
let ProjectUpdateStmt := DB:statement("UPDATE projects SET state = ? WHERE id = ?")

let project := class("project", :Id, :Name, :State, :Watches, :Task,
	create is fun(Name, URL, Branch) do
		let Id := last(ProjectCreateStmt(Name, URL, Branch))[1]
		log::info('Project created ', Id, ' ', Name, ' ', URL, ' ', Branch)
		glib::mkdir_with_parents('{ProjectPath}/{Id}', 511)
		let Project := Projects[Id] := project::new(Id, Name, state::CLONING, [])
		Project:task(state::CLONING, ["/usr/bin/git", "clone", "-v", "--recursive", "-b", Branch, URL, '{ProjectPath}/{Project:Id}/source'])
		ret Project
	end,
	load is fun(Id) Projects[Id; Id] do
		let (Name, State) := last(ProjectLoadStmt(Id)) or error("ProjectError", "Invalid project")
		project::new(Id, Name, state(State), [])
	end
)

def TaskPath := glib::canonicalize_filename("tasks", nil)
let TaskCreateStmt := DB:statement("INSERT INTO tasks(project, type) VALUES(?, ?) RETURNING id")

semaphore: TaskSemaphore(1)

meth :task(Project: project, State: state, Command: list[string]) do
	log::info('Task create ', Command)
	let Id := last(TaskCreateStmt(Project:Id, string(State)))[1]
	let TaskRoot := 'tasks/{Id}/'
	glib::mkdir_with_parents(TaskRoot, 511)
	let Out := glib::IOChannel::new_file('{TaskRoot}/out.log', "w")
	let Err := glib::IOChannel::new_file('{TaskRoot}/err.log', "w")
	log::info('Out = {Out:unix_get_fd}, Err = {Err:unix_get_fd}')
	let Directory := if State = state::PULLING then
		'{ProjectPath}/{Project:Id}/source'
	else
		'{ProjectPath}/{Project:Id}'
	end
	let (_, Pid) := glib::spawn_async_with_fds(nil, Command, [], glib::SpawnFlags::do_not_reap_child, nil, -1, Out:unix_get_fd, Err:unix_get_fd)
	Out:shutdown(false)
	Err:shutdown(false)
	Project:State := State
	Project:Task := Id
	glib::child_watch_add(200, Pid; Pid, Status) do
		log::info('Task complete ', Pid, ' ', Status)
		glib::spawn_close_pid(Pid)
		TaskSemaphore:wait
		Project:State := state(old + if Status = 0 then 1 else 2 end)
		Project:Task := nil
		let Watches := Project:Watches
		Project:Watches := []
		TaskSemaphore:signal
		last(ProjectUpdateStmt(string(Project:State), Project:Id))
		for Watch in Watches do
			Watch(Project)
		on Error do
			log::error(Error)
		end
	end
on Error do
	log::error(Error)
	TaskSemaphore:wait
	Project:State := state(old + 2)
	Project:Task := nil
	let Watches := Project:Watches
	Project:Watches := []
	TaskSemaphore:signal
	last(ProjectUpdateStmt(string(Project:State), Project:Id))
	for Watch in Watches do
		Watch(Project)
	on Error do
		log::error(Error)
	end
end

meth :build(Project: project) do
	TaskSemaphore:wait
	log::info('Building project ', Project, ': current status=', string(Project:State))
	if Project:Task then
		Project:Watches:put(:build)
		TaskSemaphore:signal
		ret
	end
	when Project:State
	is state::CLONE_SUCCESS, state::PREPARE_ERROR do
		Project:Watches:put(:build)
		Project:task(state::PREPARING, ["/usr/bin/podman", "build", "--squash", "-f", "BuildSpec", "-t", 'builder-{Project:Id}', '{ProjectPath}/{Project:Id}'])
		TaskSemaphore:signal
		ret
	is state::PREPARE_SUCCESS, state::PULL_ERROR do
		Project:Watches:put(:build)
		Project:task(state::PULLING, ["/usr/bin/git", "-C", '{ProjectPath}/{Project:Id}/source', "pull", "--recurse-submodules"])
		TaskSemaphore:signal
		ret
	is state::PULL_SUCCESS, state::BUILD_ERROR, state::BUILD_SUCCESS do
		let Source := '{ProjectPath}/{Project:Id}/source'
		Project:task(state::BUILDING, ["/usr/bin/podman", "run", "-v", '{Source}:/source', "-w", "/source", "--read-only", 'builder-{Project:Id}'])
		TaskSemaphore:signal
	end
end

let Server := soup::Server()

let LoginStmt := DB:statement("SELECT salt, passwd FROM users WHERE name = ?")

with AuthDomain := soup::AuthDomainBasic(realm is "racs") do
	AuthDomain:add_path("/project/create")
	AuthDomain:set_auth_callback(; AuthDomain, Message, Name, Password) do
		print('Name = {Name}, Password = {Password}\n')
		let Row := first(LoginStmt(Name))
		if Row then
			:> TODO: Actually check password
			ret true
		else
			print('Name: {Name} not found\n')
			ret false
		end
	on Error do
		print('Error: {Error:message}\n')
		ret false
	end
	Server:add_auth_domain(AuthDomain)
end

with AuthDomain := soup::AuthDomainBasic(realm is "racs") do
	AuthDomain:add_path("/logout")
	AuthDomain:set_auth_callback(; AuthDomain, Message, Name, Password) do
		ret false
	end
	Server:add_auth_domain(AuthDomain)
end

Server:listen_local(8081, nil)
log::info("Server running on http://localhost:8081")

Server:add_handler("/"; Server, Message, Path, Query, Client) do
	Message:set_response("text/plain", soup::MemoryUse::static, "Hello world")
	Message:set_status(200)
on Error do
	log::error(Error)
end

def MimeTypes := {
	"xhtml" is "application/xhtml+xml",
	"js" is "text/javascript",
	"css" is "text/css",
	"ico" is "image/png"
}

let serve_static_content := for Arg in Args do
	until Arg = "--cache-static", fun(Message, Path, MimeType) do
		log::info('Serving {Path} as {MimeType} with cache')
		let Content := :({})[Path; Path] do
			log::info('Reading {Path} into cache')
			let Channel := glib::IOChannel::new_file(Path, "r")
			Channel:set_encoding(nil)
			let (_, Content, Length) := Channel:read_to_end
			Channel:close
			Content
		end
		Message:set_response(MimeType, soup::MemoryUse::static, Content)
		Message:set_status(200)	
	on Error do
		log::error(Error)
		Message:set_status(404)
	end
else
	fun(Message, Path, MimeType) do
		log::info('Serving {Path} as {MimeType} without cache')
		let Channel := glib::IOChannel::new_file(Path, "r")
		Channel:set_encoding(nil)
		let (_, Content, Length) := Channel:read_to_end
		Channel:close
		Message:set_response(MimeType, soup::MemoryUse::static, Content)
		Message:set_status(200)	
	on Error do
		log::error(Error)
		Message:set_status(404)
	end
end

def StaticPath := glib::canonicalize_filename("static", nil)

Server:add_handler("/"; Server, Message, Path, Query, Client) do
	if Path = "/" then
		ret serve_static_content(Message, StaticPath + "/index.xhtml", "application/xhtml+xml")
	else
		let (_, Extension) := Path */ "."
		let MimeType := MimeTypes[Extension]
		if MimeType then
			let FullPath := glib::canonicalize_filename(Path, StaticPath)
			if FullPath:starts(StaticPath) then
				ret serve_static_content(Message, FullPath, MimeType)
			end
		end
	end
	Message:set_status(404)
end

Server:add_handler("/project/list"; Server, Message, Path, Query, Client) do
	let User := Client:get_auth_user
	log::info('Project List: User = {User}')
end

Server:add_handler("/project/create"; Server, Message, Path, Query, Client) do
	let User := Client:get_auth_user
	let Headers := Message::"request-headers"
	let Params := when Headers:get_one("content-type"):lower is "application/json" do
		json::decode(Message::"request-body-data":get_data[1])
	else
		error("TypeError", "Unsupported content type")
	end
	let Name := Params["name"] or error("ParamError", "Missing parameter name")
	let URL := Params["url"] or error("ParamError", "Missing parameter url")
	let Branch := Params["branch"] or error("ParamError", "Missing parameter branch")
	let Project := project::create(Name, URL, Branch)
	Message:set_status(201)
	Message:set_response("application/json", soup::MemoryUse::static, json::encode({"id" is Project:Id, "state" is string(Project:State), "task" is Project:Task}))
on Error do
	log::error(Error)
	Message:set_status(500)
end

Server:add_handler("/project/status"; Server, Message, Path, Query, Client) do
	let User := Client:get_auth_user
	let Headers := Message::"request-headers"
	let Params := when Headers:get_one("content-type"):lower is "application/json" do
		json::decode(Message::"request-body-data":get_data[1])
	else
		error("TypeError", "Unsupported content type")
	end
	let Id := Params["id"] or error("ParamError", "Missing parameter id")
	let Project := project::load(Id)
	Message:set_status(200)
	Message:set_response("application/json", soup::MemoryUse::static, json::encode({"id" is Project:Id, "state" is string(Project:State), "task" is Project:Task}))
on Error do
	log::error(Error)
	Message:set_status(500)
end

Server:add_handler("/project/upload"; Server, Message, Path, Query, Client) do
	let User := Client:get_auth_user
	let Headers := Message::"request-headers"
	let ContentType := Headers:get_one("content-type"):lower
	let Params := if ContentType = "application/json" then
		json::decode(Message::"request-body-data":get_data[1])
	elseif ContentType:starts("multipart/form-data") then
		let Params := {}
		let Multipart := soup::Multipart::new_from_message(Message::"request-headers", Message::"request-body")
		for I in 0 .. (Multipart:get_length - 1) do
			let (_, Headers, Body) := Multipart:get_part(I)
			let Disposition := soup::header_parse_semi_param_list(Headers:get_one("content-disposition"):lower)
			Params[Disposition["name"]] := Body:get_data[2]
		end
		Params
	else
		error("TypeError", 'Unsupported content type: {ContentType}')
	end
	let Id := Params["id"] or error("ParamError", "Missing parameter id")
	let Name := Params["name"] or error("ParamError", "Missing parameter name")
	let File := Params["file"] or error("ParamError", "Missing parameter file")
	let Project := project::load(Id)
	let FullPath := glib::canonicalize_filename(Name, '{ProjectPath}/{Id}')
	FullPath:starts('{ProjectPath}/{Id}') or error("PathError", "Invalid path")
	with Channel := glib::IOChannel::new_file(FullPath, "w") do
		Channel:set_encoding(nil)
		Channel:write_chars(File, File:length)
		Channel:shutdown(true)
	end
	if Project:State > state::CLONE_ERROR then
		Project:State := state::CLONE_SUCCESS
	end
	Message:set_status(201)
	Message:set_response("application/json", soup::MemoryUse::static, json::encode({"id" is Project:Id, "state" is string(Project:State), "task" is Project:Task}))
on Error do
	log::error(Error)
	Message:set_status(500)
end

Server:add_handler("/project/build"; Server, Message, Path, Query, Client) do
	let User := Client:get_auth_user
	let Headers := Message::"request-headers"
	let Params := when Headers:get_one("content-type"):lower is "application/json" do
		json::decode(Message::"request-body-data":get_data[1])
	else
		error("TypeError", "Unsupported content type")
	end
	let Id := Params["id"] or error("ParamError", "Missing parameter id")
	let Project := project::load(Id)
	Project:build
	Message:set_status(200)
	Message:set_response("application/json", soup::MemoryUse::static, json::encode({"id" is Project:Id, "state" is string(Project:State), "task" is Project:Task}))
on Error do
	log::error(Error)
	Message:set_status(500)
end

Loop:run



